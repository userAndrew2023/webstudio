import datetime
import enum
import sqlite3 as sl
import threading
import time

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.utils.callback_data import CallbackData
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By

from config import TOKEN

bot = Bot(TOKEN)
dp = Dispatcher(bot)


class Actions(enum.Enum):
    ACTION_START = 0
    ACTION_CREATE_TASK = 1
    ACTION_URL_UPLOADED = 2
    ACTION_TITLE_UPLOADED = 3
    ACTION_TASK_CREATED = 4


class User:
    def __init__(self, action):
        self.action = action
        self.url = None
        self.title = None
        self.time_pref = None
        self.sort = None

    def __str__(self):
        return f"{self.action}, {self.url}, {self.title}, {self.time_pref}, {self.sort}"


class Task:
    def __init__(self, url, title, time_pref, sort, user_id):
        self.url = url
        self.title = title
        self.time_pref = time_pref
        self.sort = sort
        self.user_id = user_id


class TimePreferences():
    NOW = "–°—Ä–∞–∑—É, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
    MORNING = "–í 9.00"
    EVENING = "–í 19.00"
    ONCE_A_WEEK = "–û–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"


class SortedPrice():
    EXPENSIVE = "–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ"
    CHEAP = "–°–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤—ã–µ"


MAX_TASKS = 5

tasks = {}
con = sl.connect("database.db")

users = {}


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    button = [
        [types.KeyboardButton(text="üòé –ê–∫–∫–∞—É–Ω—Ç")],
        [types.KeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")],
        [types.KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [types.KeyboardButton(text="üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
        [types.KeyboardButton(text="‚Ñπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
        [types.KeyboardButton(text="üîë –ü–æ–¥–ø–∏—Å–∫–∞")],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user['first_name']}!", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
async def create_task(message: types.Message):
    markup = types.ReplyKeyboardRemove()
    try:
        if len(tasks[message.from_user.id]) == MAX_TASKS:
            await message.reply("–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ 5 –∑–∞–¥–∞—á –Ω–∞ –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–∞")
        else:
            users[message.from_user.id] = User(Actions.ACTION_CREATE_TASK)
            await message.reply("–î–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ Avito", reply_markup=markup)
    except KeyError:
        users[message.from_user.id] = User(Actions.ACTION_CREATE_TASK)
        await message.reply("–î–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ Avito", reply_markup=markup)


@dp.message_handler(lambda message: message.text == "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: types.Message):
    await message.reply("""–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Dobby.Avito:\n+7 800 777-08-35\ninfo@dobby.plus""")


@dp.message_handler(lambda message: message.text == "üîë –ü–æ–¥–ø–∏—Å–∫–∞")
async def contacts(message: types.Message):
    await message.reply("–ú–∞–π: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")


@dp.message_handler(lambda message: message.text == "‚Ñπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def contacts(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text="""üî• –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: 
                
‚ûï –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É¬ª. 
–ó–∞–¥–∞–π—Ç–µ URL, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.

‚ùå –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É¬ª. 
–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —É–¥–∞–ª–∏—Ç–µ.

‚úÖ  –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –∑–∞–¥–∞—á–∏¬ª

‚ÑπÔ∏è –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ê–∫–∫–∞—É–Ω—Ç¬ª

üåé –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ö–æ–Ω—Ç–∞–∫—Ç—ã¬ª

üîë –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–ø–∏—Å–∫–∞¬ª

–ü–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ Dobby.Avito –ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É info@dobby.plus

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ü´°""")


@dp.message_handler(lambda message: message.text == "üòé –ê–∫–∫–∞—É–Ω—Ç")
async def account(message: types.Message):
    try:
        await message.reply(f"ID: {message.from_user.id}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(tasks[message.from_user.id])}")
    except Exception:
        await message.reply(f"ID: {message.from_user.id}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: 0")


delete_callback = CallbackData("delete", "id")


@dp.message_handler(lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
async def delete_task(message: types.Message):
    try:
        for id, i in enumerate(tasks[message.from_user.id]):
            builder = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É: ", callback_data=delete_callback.new(id=id))
            await message.reply("*URL: *" + i.task.url + "\n"
                                + "*–ù–∞–∑–≤–∞–Ω–∏–µ: *" + i.task.title + "\n"
                                + "*–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: *" + i.task.time_pref + "\n"
                                + "*–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: *" + i.task.sort, parse_mode="Markdown",
                                reply_markup=types.InlineKeyboardMarkup().add(builder))
    except KeyError:
        await message.reply("–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á")


@dp.callback_query_handler(delete_callback.filter())
async def delete_by_id(query: types.CallbackQuery, callback_data: dict):
    id = callback_data["id"]
    try:
        con = sl.connect("database.db")
        with con:
            con.execute(f"DELETE FROM tasks WHERE user_id = "
                        f"'{tasks[query.from_user.id][int(id)].task.user_id}' AND title = "
                        f"'{tasks[query.from_user.id][int(id)].task.title}'")
        con.commit()
        con.close()

        del tasks[query.from_user.id][int(id)]
        await query.answer("–£—Å–ø–µ—à–Ω–æ")
    except Exception:
        await query.answer("–û—à–∏–±–∫–∞!")


@dp.message_handler(lambda message: message.text == "–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
async def frequency(message: types.Message):
    kb = [
        [types.KeyboardButton(text=TimePreferences.NOW)],
        [types.KeyboardButton(text=TimePreferences.MORNING)],
        [types.KeyboardButton(text=TimePreferences.EVENING)],
        [types.KeyboardButton(text=TimePreferences.ONCE_A_WEEK)]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )

    await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
async def sorting(message: types.Message):
    kb = [
        [types.KeyboardButton(text=SortedPrice.EXPENSIVE)],
        [types.KeyboardButton(text=SortedPrice.CHEAP)]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )

    await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏", reply_markup=keyboard)


def print_sort():
    kb = [
        [
            types.KeyboardButton(text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    return keyboard


@dp.message_handler()
async def create_task_message(message: types.Message):
    button = [
        [types.KeyboardButton(text="üòé –ê–∫–∫–∞—É–Ω—Ç")],
        [types.KeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")],
        [types.KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [types.KeyboardButton(text="üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
        [types.KeyboardButton(text="‚Ñπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)
    username = message.from_user.id
    current_user = users[username]
    if current_user.action == Actions.ACTION_CREATE_TASK:
        current_user.url = message.text
        current_user.action = Actions.ACTION_URL_UPLOADED
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏")
    elif current_user.action == Actions.ACTION_URL_UPLOADED:
        current_user.title = message.text
        current_user.action = Actions.ACTION_TITLE_UPLOADED

        kb = [
            [
                types.KeyboardButton(text="–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            ]
        ]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True
        )

        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏", reply_markup=keyboard)
    elif message.text == TimePreferences.NOW:
        current_user.time_pref = TimePreferences.NOW
        await message.reply("–£–∫–∞–∂–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏", reply_markup=print_sort())
    elif message.text == TimePreferences.MORNING:
        current_user.time_pref = TimePreferences.MORNING
        await message.reply("–£–∫–∞–∂–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏", reply_markup=print_sort())
    elif message.text == TimePreferences.EVENING:
        current_user.time_pref = TimePreferences.EVENING
        await message.reply("–£–∫–∞–∂–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏", reply_markup=print_sort())
    elif message.text == TimePreferences.ONCE_A_WEEK:
        current_user.time_pref = TimePreferences.ONCE_A_WEEK
        await message.reply("–£–∫–∞–∂–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏", reply_markup=print_sort())
    elif message.text == SortedPrice.CHEAP:
        current_user.sort = SortedPrice.CHEAP
        await message.reply("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞", reply_markup=keyboard)

        con = sl.connect("database.db")
        sql = "INSERT INTO tasks (id, url, title, time_pref, sort, user_id) VALUES (?, ?, ?, ?, ?, ?)"

        con.execute("""CREATE TABLE IF NOT EXISTS tasks (
                                                        id      INTEGER NOT NULL
                                                                        PRIMARY KEY AUTOINCREMENT,
                                                        url    TEXT,
                                                        title    TEXT,
                                                        time_pref    TEXT,
                                                        sort   TEXT,
                                                        user_id TEXT
                                                    );
                                                    """)
        con.commit()
        ex = list(con.execute("SELECT * FROM tasks"))
        if len(ex) == 0:
            data = [
                (1, current_user.url, current_user.title, current_user.time_pref, current_user.sort,
                 message.from_user.id)
            ]
            con.executemany(sql, data)

            con.commit()
            con.close()
        else:
            data = [
                (ex[-1][0] + 1, current_user.url, current_user.title, current_user.time_pref, current_user.sort,
                 message.from_user.id)
            ]
            con.executemany(sql, data)

            con.commit()
            con.close()

        try:
            tasks[username].append(
                Tracking(Task(current_user.url, current_user.title, current_user.time_pref, current_user.sort,
                              message.from_user.id)))
        except KeyError:
            tasks[username] = [
                Tracking(Task(current_user.url, current_user.title, current_user.time_pref, current_user.sort,
                              message.from_user.id))]

        con = sl.connect("database.db")
        sql = "INSERT INTO tasks (url, title, time_pref, sort, user_id) VALUES (?, ?, ?, ?, ?)"

        con.execute("""CREATE TABLE IF NOT EXISTS tasks (
                                                id      INTEGER NOT NULL
                                                                PRIMARY KEY AUTOINCREMENT,
                                                url    TEXT,
                                                title    TEXT,
                                                time_pref    TEXT,
                                                sort   TEXT,
                                                user_id TEXT
                                            );
                                            """)

        ex = list(con.execute("SELECT * FROM tasks"))
        if len(ex) == 0:
            data = [
                (current_user.url, current_user.title, current_user.time_pref, current_user.sort,
                 message.from_user.id)
            ]
            con.executemany(sql, data)

            con.commit()
            con.close()
        else:
            data = [
                (current_user.url, current_user.title, current_user.time_pref, current_user.sort,
                 message.from_user.id)
            ]
            con.executemany(sql, data)

            con.commit()
            con.close()

        th = threading.Thread(target=tasks[username][-1].start_tracking)
        th.start()
    elif message.text == SortedPrice.EXPENSIVE and current_user.time_pref is not None:
        current_user.sort = SortedPrice.EXPENSIVE
        await message.reply("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞", reply_markup=keyboard)
        con = sl.connect("database.db")
        sql = "INSERT INTO tasks (id, url, title, time_pref, sort, user_id) VALUES (?, ?, ?, ?, ?, ?)"

        con.execute("""CREATE TABLE IF NOT EXISTS tasks (
                                                                id      INTEGER NOT NULL
                                                                                PRIMARY KEY AUTOINCREMENT,
                                                                url    TEXT,
                                                                title    TEXT,
                                                                time_pref    TEXT,
                                                                sort   TEXT,
                                                                user_id TEXT
                                                            );
                                                            """)

        ex = list(con.execute("SELECT * FROM tasks"))
        if len(ex) == 0:
            data = [
                (1, current_user.url, current_user.title, current_user.time_pref, current_user.sort,
                 message.from_user.id)
            ]
            con.executemany(sql, data)

            con.commit()
            con.close()
        else:
            data = [
                (ex[-1][0] + 1, current_user.url, current_user.title, current_user.time_pref, current_user.sort,
                 message.from_user.id)
            ]
            con.executemany(sql, data)

            con.commit()
            con.close()

        try:
            tasks[username].append(
                Tracking(Task(current_user.url, current_user.title, current_user.time_pref, current_user.sort,
                              message.from_user.id)))
        except KeyError:
            tasks[username] = [
                Tracking(Task(current_user.url, current_user.title, current_user.time_pref, current_user.sort,
                              message.from_user.id))]

        con = sl.connect("database.db")
        sql = "INSERT INTO tasks (url, title, time_pref, sort, user_id) VALUES (?, ?, ?, ?, ?)"

        con.execute("""CREATE TABLE IF NOT EXISTS tasks (
                                                        id      INTEGER NOT NULL
                                                                        PRIMARY KEY AUTOINCREMENT,
                                                        url    TEXT,
                                                        title    TEXT,
                                                        time_pref    TEXT,
                                                        sort   TEXT,
                                                        user_id TEXT
                                                    );""")

        ex = list(con.execute("SELECT * FROM tasks"))
        if len(ex) == 0:
            data = [
                (current_user.url, current_user.title, current_user.time_pref, current_user.sort,
                 message.from_user.id)
            ]
            con.executemany(sql, data)

            con.commit()
            con.close()
        else:
            data = [
                (current_user.url, current_user.title, current_user.time_pref, current_user.sort,
                 message.from_user.id)
            ]
            con.executemany(sql, data)

            con.commit()
            con.close()

        th = threading.Thread(target=tasks[username][-1].start_tracking)
        th.start()


### TRACKING SERVICE


def recursive_space(param):
    if param[0] == " ":
        param = param[1:]
        return recursive_space(param)
    else:
        return param


class Tracking:
    service = Service(executable_path="chromedriver.exe")

    def __init__(self, task: Task):
        self.task = task
        self.products = list()

    def track(self, first_launch=False):
        self.products = []
        driver = webdriver.Chrome()
        driver.get(self.task.url)
        if bool(driver.find_elements(By.CLASS_NAME, "items-extraTitle-JFe8_")):
            elem = driver.find_elements(By.XPATH, "//div[contains(concat(' ', @class, ' '), 'items-items-kAJAg')]")
            list_ = elem[0].text.split("\n")
            list_2 = elem[0].find_elements(By.CLASS_NAME, "iva-item-sliderLink-uLz1v")
            for index, i in enumerate(list_):
                try:
                    if "‚ÇΩ" in list_[index + 1] and type(
                            int(list_[index + 1].replace("‚ÇΩ", "").replace(" ", ""))) == int:
                        self.products.append(
                            Product(list_[index], list_[index + 1]))
                except Exception:
                    pass

        else:
            for i in range(3):
                driver.get(self.task.url + "&p=" + str(i + 1))
                if bool(driver.find_elements(By.CLASS_NAME, "items-extraTitle-JFe8_")):
                    elem = driver.find_elements(By.XPATH,
                                                "//div[contains(concat(' ', @class, ' '), 'items-items-kAJAg')]")
                    list_ = elem[0].text.split("\n")
                    list_2 = elem[0].find_elements(By.CLASS_NAME, "iva-item-sliderLink-uLz1v")
                    for index, i in enumerate(list_):
                        try:
                            if index != len(list_) - 1:
                                if "‚ÇΩ" in list_[index + 1] and type(
                                        int(list_[index + 1].replace("‚ÇΩ", "").replace(" ", ""))) == int:
                                    self.products.append(Product(recursive_space(list_[index]), list_[index + 1]))
                        except Exception:
                            pass
        con = sl.connect('database.db')
        if first_launch:
            sql = 'INSERT INTO PRODUCTS (name, price, user_id) values (?, ?, ?)'

            con.execute("""CREATE TABLE IF NOT EXISTS PRODUCTS (
                                id      INTEGER NOT NULL
                                                PRIMARY KEY AUTOINCREMENT,
                                name    TEXT,
                                price   TEXT,
                                user_id TEXT
                            );
                            """)

            data = []
            for i in self.products:
                data.append((i.title, str(i.price), self.task.user_id))
            with con:
                con.executemany(sql, data)
            driver.close()

        else:
            with con:
                data = list(con.execute(f"SELECT * FROM PRODUCTS WHERE user_id = '{self.task.user_id}'"))
                data = data[1:]

            ins = 'INSERT INTO PRODUCTS (name, price, user_id) values (?, ?, ?)'
            new_data = []
            for i in self.products:
                new_data.append((i.title, i.price, self.task.user_id))

            to_ret = [i for i in new_data if i not in data]

            with con:
                con.execute(f"DELETE FROM PRODUCTS WHERE user_id = '{self.task.user_id}'")

            with con:

                con.executemany(ins, new_data)
            driver.close()
            return to_ret
        con.commit()
        con.close()
        driver.quit()
        print("HEHEHE")

    def check_task_in_db(self):
        con = sl.connect("database.db")
        print(self.task.user_id)
        print(self.task.title)
        sql = f"SELECT * FROM tasks WHERE " \
              f"(user_id = {self.task.user_id}) AND (title = {self.task.title})"
        try:
            data = con.execute(sql)

            con.commit()
            con.close()

            if len(list(data)) == 0:
                return False
            return True
        except Exception:
            return False

    def start_tracking(self):
        self.track(first_launch=True)

        print("–†–£–£")

        if self.task.time_pref == TimePreferences.NOW:
            while True:

                if not self.check_task_in_db():
                    break

                track = self.track()
                if type(track) == list:
                    for i in track:
                        bot.send_message(i[-1],
                                         f"–ü–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n–ù–∞–∑–≤–∞–Ω–∏–µ: {i[0]}\n–¶–µ–Ω–∞: {i[1]}\nC—Å—ã–ª–∫–∞:{i[2]}")
                time.sleep(10)
        elif self.task.time_pref == TimePreferences.EVENING:
            while True:

                current_time = datetime.time()
                if current_time.hour == 19 and current_time.minute == 0:
                    track = self.track()
                    if type(track) == list:
                        for i in track:
                            send_message(i[-1],
                                         f"–ü–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n–ù–∞–∑–≤–∞–Ω–∏–µ: {i[0]}\n–¶–µ–Ω–∞: {i[1]}\nC—Å—ã–ª–∫–∞:{i[2]}")
                    time.sleep(86400)

        elif self.task.time_pref == TimePreferences.MORNING:
            while True:

                current_time = datetime.time()
                if current_time.hour == 9 and current_time.minute == 0:
                    track = self.track()
                    if type(track) == list:
                        for i in track:
                            send_message(i[-1],
                                         f"–ü–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n–ù–∞–∑–≤–∞–Ω–∏–µ: {i[0]}\n–¶–µ–Ω–∞: {i[1]}\nC—Å—ã–ª–∫–∞:{i[2]}")
                    time.sleep(86400)
        elif self.task.time_pref == TimePreferences.ONCE_A_WEEK:
            while True:

                track = self.track()
                if type(track) == list:
                    for i in track:
                        send_message(i[-1],
                                     f"–ü–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n–ù–∞–∑–≤–∞–Ω–∏–µ: {i[0]}\n–¶–µ–Ω–∞: {i[1]}\nC—Å—ã–ª–∫–∞:{i[2]}")
                time.sleep(604800)


def grouper(iterable, n):
    args = [iter(iterable)] * n
    return zip(*args)


class Product:
    def __init__(self, title, price):
        self.title = title
        self.price = price

    def __str__(self):
        return self.title + " " + self.price


async def send_message(chat_id, message):
    await bot.send_message(chat_id, message)


### STARTING BOT


if __name__ == "__main__":

    con.execute("""CREATE TABLE IF NOT EXISTS tasks (
                                                            id      INTEGER NOT NULL
                                                                            PRIMARY KEY AUTOINCREMENT,
                                                            url    TEXT,
                                                            title    TEXT,
                                                            time_pref    TEXT,
                                                            sort   TEXT,
                                                            user_id TEXT
                                                        );""")

    for i in con.execute("SELECT * FROM tasks"):
        j = list(i)[1:]
        if not tasks.get('username', False):
            tasks[j[-1]] = [Tracking(Task(j[0], j[1], j[2], j[3], j[-1]))]
        else:
            tasks[j[-1]].append(Tracking(Task(j[0], j[1], j[2], j[3], j[-1])))          

    executor.start_polling(dp)
